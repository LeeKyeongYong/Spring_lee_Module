/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDate;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JMsa;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.JLecture.LecturePath;
import org.jooq.generated.tables.JStudent.StudentPath;
import org.jooq.generated.tables.records.SubjectRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JSubject extends TableImpl<SubjectRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>msa.subject</code>
     */
    public static final JSubject SUBJECT = new JSubject();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubjectRecord> getRecordType() {
        return SubjectRecord.class;
    }

    /**
     * The column <code>msa.subject.hours</code>.
     */
    public final TableField<SubjectRecord, Integer> HOURS = createField(DSL.name("hours"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>msa.subject.open_date</code>.
     */
    public final TableField<SubjectRecord, LocalDate> OPEN_DATE = createField(DSL.name("open_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>msa.subject.id</code>.
     */
    public final TableField<SubjectRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>msa.subject.name</code>.
     */
    public final TableField<SubjectRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    private JSubject(Name alias, Table<SubjectRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JSubject(Name alias, Table<SubjectRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>msa.subject</code> table reference
     */
    public JSubject(String alias) {
        this(DSL.name(alias), SUBJECT);
    }

    /**
     * Create an aliased <code>msa.subject</code> table reference
     */
    public JSubject(Name alias) {
        this(alias, SUBJECT);
    }

    /**
     * Create a <code>msa.subject</code> table reference
     */
    public JSubject() {
        this(DSL.name("subject"), null);
    }

    public <O extends Record> JSubject(Table<O> path, ForeignKey<O, SubjectRecord> childPath, InverseForeignKey<O, SubjectRecord> parentPath) {
        super(path, childPath, parentPath, SUBJECT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SubjectPath extends JSubject implements Path<SubjectRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SubjectPath(Table<O> path, ForeignKey<O, SubjectRecord> childPath, InverseForeignKey<O, SubjectRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SubjectPath(Name alias, Table<SubjectRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SubjectPath as(String alias) {
            return new SubjectPath(DSL.name(alias), this);
        }

        @Override
        public SubjectPath as(Name alias) {
            return new SubjectPath(alias, this);
        }

        @Override
        public SubjectPath as(Table<?> alias) {
            return new SubjectPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMsa.MSA;
    }

    @Override
    public Identity<SubjectRecord, Long> getIdentity() {
        return (Identity<SubjectRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SubjectRecord> getPrimaryKey() {
        return Keys.KEY_SUBJECT_PRIMARY;
    }

    private transient LecturePath _lecture;

    /**
     * Get the implicit to-many join path to the <code>msa.lecture</code> table
     */
    public LecturePath lecture() {
        if (_lecture == null)
            _lecture = new LecturePath(this, null, Keys.FK4KQEA9M3CR124NA3JT0N1O1AO.getInverseKey());

        return _lecture;
    }

    /**
     * Get the implicit many-to-many join path to the <code>msa.student</code>
     * table
     */
    public StudentPath student() {
        return lecture().student();
    }

    @Override
    public JSubject as(String alias) {
        return new JSubject(DSL.name(alias), this);
    }

    @Override
    public JSubject as(Name alias) {
        return new JSubject(alias, this);
    }

    @Override
    public JSubject as(Table<?> alias) {
        return new JSubject(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JSubject rename(String name) {
        return new JSubject(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JSubject rename(Name name) {
        return new JSubject(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JSubject rename(Table<?> name) {
        return new JSubject(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JSubject where(Condition condition) {
        return new JSubject(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JSubject where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JSubject where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JSubject where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JSubject where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JSubject where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JSubject where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JSubject where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JSubject whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JSubject whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
