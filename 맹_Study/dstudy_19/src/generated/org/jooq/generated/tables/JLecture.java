/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JMsa;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.JStudent.StudentPath;
import org.jooq.generated.tables.JSubject.SubjectPath;
import org.jooq.generated.tables.records.LectureRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JLecture extends TableImpl<LectureRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>msa.lecture</code>
     */
    public static final JLecture LECTURE = new JLecture();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LectureRecord> getRecordType() {
        return LectureRecord.class;
    }

    /**
     * The column <code>msa.lecture.score</code>.
     */
    public final TableField<LectureRecord, Integer> SCORE = createField(DSL.name("score"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>msa.lecture.id</code>.
     */
    public final TableField<LectureRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>msa.lecture.no</code>.
     */
    public final TableField<LectureRecord, Long> NO = createField(DSL.name("no"), SQLDataType.BIGINT.nullable(false), this, "");

    private JLecture(Name alias, Table<LectureRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JLecture(Name alias, Table<LectureRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>msa.lecture</code> table reference
     */
    public JLecture(String alias) {
        this(DSL.name(alias), LECTURE);
    }

    /**
     * Create an aliased <code>msa.lecture</code> table reference
     */
    public JLecture(Name alias) {
        this(alias, LECTURE);
    }

    /**
     * Create a <code>msa.lecture</code> table reference
     */
    public JLecture() {
        this(DSL.name("lecture"), null);
    }

    public <O extends Record> JLecture(Table<O> path, ForeignKey<O, LectureRecord> childPath, InverseForeignKey<O, LectureRecord> parentPath) {
        super(path, childPath, parentPath, LECTURE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LecturePath extends JLecture implements Path<LectureRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> LecturePath(Table<O> path, ForeignKey<O, LectureRecord> childPath, InverseForeignKey<O, LectureRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LecturePath(Name alias, Table<LectureRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LecturePath as(String alias) {
            return new LecturePath(DSL.name(alias), this);
        }

        @Override
        public LecturePath as(Name alias) {
            return new LecturePath(alias, this);
        }

        @Override
        public LecturePath as(Table<?> alias) {
            return new LecturePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMsa.MSA;
    }

    @Override
    public UniqueKey<LectureRecord> getPrimaryKey() {
        return Keys.KEY_LECTURE_PRIMARY;
    }

    @Override
    public List<ForeignKey<LectureRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK4KQEA9M3CR124NA3JT0N1O1AO, Keys.FK6XLO93RAFB86KWF7MDU19WHRV);
    }

    private transient SubjectPath _subject;

    /**
     * Get the implicit join path to the <code>msa.subject</code> table.
     */
    public SubjectPath subject() {
        if (_subject == null)
            _subject = new SubjectPath(this, Keys.FK4KQEA9M3CR124NA3JT0N1O1AO, null);

        return _subject;
    }

    private transient StudentPath _student;

    /**
     * Get the implicit join path to the <code>msa.student</code> table.
     */
    public StudentPath student() {
        if (_student == null)
            _student = new StudentPath(this, Keys.FK6XLO93RAFB86KWF7MDU19WHRV, null);

        return _student;
    }

    @Override
    public JLecture as(String alias) {
        return new JLecture(DSL.name(alias), this);
    }

    @Override
    public JLecture as(Name alias) {
        return new JLecture(alias, this);
    }

    @Override
    public JLecture as(Table<?> alias) {
        return new JLecture(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JLecture rename(String name) {
        return new JLecture(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JLecture rename(Name name) {
        return new JLecture(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JLecture rename(Table<?> name) {
        return new JLecture(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JLecture where(Condition condition) {
        return new JLecture(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JLecture where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JLecture where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JLecture where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JLecture where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JLecture where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JLecture where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JLecture where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JLecture whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JLecture whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
