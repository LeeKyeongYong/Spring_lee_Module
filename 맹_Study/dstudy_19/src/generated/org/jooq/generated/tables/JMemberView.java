/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableOptions;
import org.jooq.generated.JMsa;
import org.jooq.generated.tables.records.MemberViewRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * View 'msa.member_view' references invalid table(s) or column(s) or
 * function(s) or definer/invoker of view lack rights to use them
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JMemberView extends TableImpl<MemberViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>msa.member_view</code>
     */
    public static final JMemberView MEMBER_VIEW = new JMemberView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MemberViewRecord> getRecordType() {
        return MemberViewRecord.class;
    }

    private JMemberView(Name alias, Table<MemberViewRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JMemberView(Name alias, Table<MemberViewRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("View 'msa.member_view' references invalid table(s) or column(s) or function(s) or definer/invoker of view lack rights to use them"), TableOptions.view("create view `member_view` as select `m`.`id` AS `member_id`,`m`.`userid` AS `userid`,`m`.`username` AS `username`,`m`.`role_type` AS `role_type`,`m`.`password` AS `password`,(case when (`m`.`role_type` = 'ROLE_ADMIN') then '관리자' when (`m`.`role_type` = 'ROLE_MEMBER') then '일반 사용자' when (`m`.`role_type` = 'ROLE_HEADHUNTER') then '헤드 헌터' when (`m`.`role_type` = 'ROLE_MANAGER') then '기업 관리자' when (`m`.`role_type` = 'ROLE_HR') then '채용 담당자' else 'ROLE_MEMBER' end) AS `authorities`,(case when (`m`.`role_type` = 'ROLE_ADMIN') then true else false end) AS `is_admin` from `msa`.`member` `m`"), where);
    }

    /**
     * Create an aliased <code>msa.member_view</code> table reference
     */
    public JMemberView(String alias) {
        this(DSL.name(alias), MEMBER_VIEW);
    }

    /**
     * Create an aliased <code>msa.member_view</code> table reference
     */
    public JMemberView(Name alias) {
        this(alias, MEMBER_VIEW);
    }

    /**
     * Create a <code>msa.member_view</code> table reference
     */
    public JMemberView() {
        this(DSL.name("member_view"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMsa.MSA;
    }

    @Override
    public JMemberView as(String alias) {
        return new JMemberView(DSL.name(alias), this);
    }

    @Override
    public JMemberView as(Name alias) {
        return new JMemberView(alias, this);
    }

    @Override
    public JMemberView as(Table<?> alias) {
        return new JMemberView(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JMemberView rename(String name) {
        return new JMemberView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JMemberView rename(Name name) {
        return new JMemberView(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JMemberView rename(Table<?> name) {
        return new JMemberView(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMemberView where(Condition condition) {
        return new JMemberView(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMemberView where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMemberView where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMemberView where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JMemberView where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JMemberView where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JMemberView where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JMemberView where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMemberView whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMemberView whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
