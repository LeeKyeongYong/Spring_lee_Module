/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDate;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JMsa;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.JLecture.LecturePath;
import org.jooq.generated.tables.JSubject.SubjectPath;
import org.jooq.generated.tables.records.StudentRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JStudent extends TableImpl<StudentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>msa.student</code>
     */
    public static final JStudent STUDENT = new JStudent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudentRecord> getRecordType() {
        return StudentRecord.class;
    }

    /**
     * The column <code>msa.student.birth_date</code>.
     */
    public final TableField<StudentRecord, LocalDate> BIRTH_DATE = createField(DSL.name("birth_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>msa.student.no</code>.
     */
    public final TableField<StudentRecord, Long> NO = createField(DSL.name("no"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>msa.student.email</code>.
     */
    public final TableField<StudentRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>msa.student.name</code>.
     */
    public final TableField<StudentRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    private JStudent(Name alias, Table<StudentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JStudent(Name alias, Table<StudentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>msa.student</code> table reference
     */
    public JStudent(String alias) {
        this(DSL.name(alias), STUDENT);
    }

    /**
     * Create an aliased <code>msa.student</code> table reference
     */
    public JStudent(Name alias) {
        this(alias, STUDENT);
    }

    /**
     * Create a <code>msa.student</code> table reference
     */
    public JStudent() {
        this(DSL.name("student"), null);
    }

    public <O extends Record> JStudent(Table<O> path, ForeignKey<O, StudentRecord> childPath, InverseForeignKey<O, StudentRecord> parentPath) {
        super(path, childPath, parentPath, STUDENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class StudentPath extends JStudent implements Path<StudentRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> StudentPath(Table<O> path, ForeignKey<O, StudentRecord> childPath, InverseForeignKey<O, StudentRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private StudentPath(Name alias, Table<StudentRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public StudentPath as(String alias) {
            return new StudentPath(DSL.name(alias), this);
        }

        @Override
        public StudentPath as(Name alias) {
            return new StudentPath(alias, this);
        }

        @Override
        public StudentPath as(Table<?> alias) {
            return new StudentPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMsa.MSA;
    }

    @Override
    public Identity<StudentRecord, Long> getIdentity() {
        return (Identity<StudentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<StudentRecord> getPrimaryKey() {
        return Keys.KEY_STUDENT_PRIMARY;
    }

    private transient LecturePath _lecture;

    /**
     * Get the implicit to-many join path to the <code>msa.lecture</code> table
     */
    public LecturePath lecture() {
        if (_lecture == null)
            _lecture = new LecturePath(this, null, Keys.FK6XLO93RAFB86KWF7MDU19WHRV.getInverseKey());

        return _lecture;
    }

    /**
     * Get the implicit many-to-many join path to the <code>msa.subject</code>
     * table
     */
    public SubjectPath subject() {
        return lecture().subject();
    }

    @Override
    public JStudent as(String alias) {
        return new JStudent(DSL.name(alias), this);
    }

    @Override
    public JStudent as(Name alias) {
        return new JStudent(alias, this);
    }

    @Override
    public JStudent as(Table<?> alias) {
        return new JStudent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JStudent rename(String name) {
        return new JStudent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JStudent rename(Name name) {
        return new JStudent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JStudent rename(Table<?> name) {
        return new JStudent(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStudent where(Condition condition) {
        return new JStudent(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStudent where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStudent where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStudent where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JStudent where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JStudent where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JStudent where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JStudent where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStudent whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStudent whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
