/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.enums.PaymentsStatus;
import org.jooq.generated.tables.JPayments;
import org.jooq.generated.tables.pojos.Payments;
import org.jooq.generated.tables.records.PaymentsRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PaymentsDao extends DAOImpl<PaymentsRecord, Payments, Long> {

    /**
     * Create a new PaymentsDao without any configuration
     */
    public PaymentsDao() {
        super(JPayments.PAYMENTS, Payments.class);
    }

    /**
     * Create a new PaymentsDao with an attached configuration
     */
    public PaymentsDao(Configuration configuration) {
        super(JPayments.PAYMENTS, Payments.class, configuration);
    }

    @Override
    public Long getId(Payments object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>amount BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Payments> fetchRangeOfJAmount(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JPayments.PAYMENTS.AMOUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>amount IN (values)</code>
     */
    public List<Payments> fetchByJAmount(Integer... values) {
        return fetch(JPayments.PAYMENTS.AMOUNT, values);
    }

    /**
     * Fetch records that have <code>remaining_amount BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Payments> fetchRangeOfJRemainingAmount(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JPayments.PAYMENTS.REMAINING_AMOUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>remaining_amount IN (values)</code>
     */
    public List<Payments> fetchByJRemainingAmount(Integer... values) {
        return fetch(JPayments.PAYMENTS.REMAINING_AMOUNT, values);
    }

    /**
     * Fetch records that have <code>completed_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Payments> fetchRangeOfJCompletedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JPayments.PAYMENTS.COMPLETED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>completed_at IN (values)</code>
     */
    public List<Payments> fetchByJCompletedAt(LocalDateTime... values) {
        return fetch(JPayments.PAYMENTS.COMPLETED_AT, values);
    }

    /**
     * Fetch records that have <code>create_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Payments> fetchRangeOfJCreateDate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JPayments.PAYMENTS.CREATE_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_date IN (values)</code>
     */
    public List<Payments> fetchByJCreateDate(LocalDateTime... values) {
        return fetch(JPayments.PAYMENTS.CREATE_DATE, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Payments> fetchRangeOfJCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JPayments.PAYMENTS.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<Payments> fetchByJCreatedAt(LocalDateTime... values) {
        return fetch(JPayments.PAYMENTS.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Payments> fetchRangeOfJId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JPayments.PAYMENTS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<Payments> fetchByJId(Long... values) {
        return fetch(JPayments.PAYMENTS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Payments fetchOneByJId(Long value) {
        return fetchOne(JPayments.PAYMENTS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<Payments> fetchOptionalByJId(Long value) {
        return fetchOptional(JPayments.PAYMENTS.ID, value);
    }

    /**
     * Fetch records that have <code>member_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Payments> fetchRangeOfJMemberId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JPayments.PAYMENTS.MEMBER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>member_id IN (values)</code>
     */
    public List<Payments> fetchByJMemberId(Long... values) {
        return fetch(JPayments.PAYMENTS.MEMBER_ID, values);
    }

    /**
     * Fetch records that have <code>modify_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Payments> fetchRangeOfJModifyDate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JPayments.PAYMENTS.MODIFY_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modify_date IN (values)</code>
     */
    public List<Payments> fetchByJModifyDate(LocalDateTime... values) {
        return fetch(JPayments.PAYMENTS.MODIFY_DATE, values);
    }

    /**
     * Fetch records that have <code>version BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Payments> fetchRangeOfJVersion(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JPayments.PAYMENTS.VERSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    public List<Payments> fetchByJVersion(Long... values) {
        return fetch(JPayments.PAYMENTS.VERSION, values);
    }

    /**
     * Fetch records that have <code>order_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Payments> fetchRangeOfJOrderId(String lowerInclusive, String upperInclusive) {
        return fetchRange(JPayments.PAYMENTS.ORDER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>order_id IN (values)</code>
     */
    public List<Payments> fetchByJOrderId(String... values) {
        return fetch(JPayments.PAYMENTS.ORDER_ID, values);
    }

    /**
     * Fetch records that have <code>payment_key BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Payments> fetchRangeOfJPaymentKey(String lowerInclusive, String upperInclusive) {
        return fetchRange(JPayments.PAYMENTS.PAYMENT_KEY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>payment_key IN (values)</code>
     */
    public List<Payments> fetchByJPaymentKey(String... values) {
        return fetch(JPayments.PAYMENTS.PAYMENT_KEY, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Payments> fetchRangeOfJStatus(PaymentsStatus lowerInclusive, PaymentsStatus upperInclusive) {
        return fetchRange(JPayments.PAYMENTS.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<Payments> fetchByJStatus(PaymentsStatus... values) {
        return fetch(JPayments.PAYMENTS.STATUS, values);
    }
}
