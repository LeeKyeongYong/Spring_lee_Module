/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableOptions;
import org.jooq.generated.JMsa;
import org.jooq.generated.tables.records.PostCommentCountRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * View 'msa.post_comment_count' references invalid table(s) or column(s) or
 * function(s) or definer/invoker of view lack rights to use them
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JPostCommentCount extends TableImpl<PostCommentCountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>msa.post_comment_count</code>
     */
    public static final JPostCommentCount POST_COMMENT_COUNT = new JPostCommentCount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PostCommentCountRecord> getRecordType() {
        return PostCommentCountRecord.class;
    }

    private JPostCommentCount(Name alias, Table<PostCommentCountRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JPostCommentCount(Name alias, Table<PostCommentCountRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("View 'msa.post_comment_count' references invalid table(s) or column(s) or function(s) or definer/invoker of view lack rights to use them"), TableOptions.view("create view `post_comment_count` as select `p`.`id` AS `post_id`,`p`.`title` AS `post_title`,count(`pc`.`id`) AS `comment_count` from (`msa`.`post` `p` left join `msa`.`post_comment` `pc` on((`p`.`id` = `pc`.`post_id`))) group by `p`.`id`,`p`.`title`"), where);
    }

    /**
     * Create an aliased <code>msa.post_comment_count</code> table reference
     */
    public JPostCommentCount(String alias) {
        this(DSL.name(alias), POST_COMMENT_COUNT);
    }

    /**
     * Create an aliased <code>msa.post_comment_count</code> table reference
     */
    public JPostCommentCount(Name alias) {
        this(alias, POST_COMMENT_COUNT);
    }

    /**
     * Create a <code>msa.post_comment_count</code> table reference
     */
    public JPostCommentCount() {
        this(DSL.name("post_comment_count"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMsa.MSA;
    }

    @Override
    public JPostCommentCount as(String alias) {
        return new JPostCommentCount(DSL.name(alias), this);
    }

    @Override
    public JPostCommentCount as(Name alias) {
        return new JPostCommentCount(alias, this);
    }

    @Override
    public JPostCommentCount as(Table<?> alias) {
        return new JPostCommentCount(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JPostCommentCount rename(String name) {
        return new JPostCommentCount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JPostCommentCount rename(Name name) {
        return new JPostCommentCount(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JPostCommentCount rename(Table<?> name) {
        return new JPostCommentCount(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPostCommentCount where(Condition condition) {
        return new JPostCommentCount(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPostCommentCount where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPostCommentCount where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPostCommentCount where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPostCommentCount where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPostCommentCount where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPostCommentCount where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPostCommentCount where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPostCommentCount whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPostCommentCount whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
