/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Indexes;
import org.jooq.generated.JMsa;
import org.jooq.generated.Keys;
import org.jooq.generated.enums.PaymentsStatus;
import org.jooq.generated.tables.JPaymentCancel.PaymentCancelPath;
import org.jooq.generated.tables.records.PaymentsRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JPayments extends TableImpl<PaymentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>msa.payments</code>
     */
    public static final JPayments PAYMENTS = new JPayments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentsRecord> getRecordType() {
        return PaymentsRecord.class;
    }

    /**
     * The column <code>msa.payments.amount</code>.
     */
    public final TableField<PaymentsRecord, Integer> AMOUNT = createField(DSL.name("amount"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>msa.payments.remaining_amount</code>.
     */
    public final TableField<PaymentsRecord, Integer> REMAINING_AMOUNT = createField(DSL.name("remaining_amount"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>msa.payments.completed_at</code>.
     */
    public final TableField<PaymentsRecord, LocalDateTime> COMPLETED_AT = createField(DSL.name("completed_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>msa.payments.create_date</code>.
     */
    public final TableField<PaymentsRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>msa.payments.created_at</code>.
     */
    public final TableField<PaymentsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>msa.payments.id</code>.
     */
    public final TableField<PaymentsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>msa.payments.member_id</code>.
     */
    public final TableField<PaymentsRecord, Long> MEMBER_ID = createField(DSL.name("member_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>msa.payments.modify_date</code>.
     */
    public final TableField<PaymentsRecord, LocalDateTime> MODIFY_DATE = createField(DSL.name("modify_date"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>msa.payments.version</code>.
     */
    public final TableField<PaymentsRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>msa.payments.order_id</code>.
     */
    public final TableField<PaymentsRecord, String> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>msa.payments.payment_key</code>.
     */
    public final TableField<PaymentsRecord, String> PAYMENT_KEY = createField(DSL.name("payment_key"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>msa.payments.status</code>.
     */
    public final TableField<PaymentsRecord, PaymentsStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(16).nullable(false).asEnumDataType(PaymentsStatus.class), this, "");

    private JPayments(Name alias, Table<PaymentsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JPayments(Name alias, Table<PaymentsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>msa.payments</code> table reference
     */
    public JPayments(String alias) {
        this(DSL.name(alias), PAYMENTS);
    }

    /**
     * Create an aliased <code>msa.payments</code> table reference
     */
    public JPayments(Name alias) {
        this(alias, PAYMENTS);
    }

    /**
     * Create a <code>msa.payments</code> table reference
     */
    public JPayments() {
        this(DSL.name("payments"), null);
    }

    public <O extends Record> JPayments(Table<O> path, ForeignKey<O, PaymentsRecord> childPath, InverseForeignKey<O, PaymentsRecord> parentPath) {
        super(path, childPath, parentPath, PAYMENTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PaymentsPath extends JPayments implements Path<PaymentsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PaymentsPath(Table<O> path, ForeignKey<O, PaymentsRecord> childPath, InverseForeignKey<O, PaymentsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PaymentsPath(Name alias, Table<PaymentsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PaymentsPath as(String alias) {
            return new PaymentsPath(DSL.name(alias), this);
        }

        @Override
        public PaymentsPath as(Name alias) {
            return new PaymentsPath(alias, this);
        }

        @Override
        public PaymentsPath as(Table<?> alias) {
            return new PaymentsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMsa.MSA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PAYMENTS_FKFPSRATGT9QM3ON1N5NLSVY8F);
    }

    @Override
    public Identity<PaymentsRecord, Long> getIdentity() {
        return (Identity<PaymentsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PaymentsRecord> getPrimaryKey() {
        return Keys.KEY_PAYMENTS_PRIMARY;
    }

    private transient PaymentCancelPath _paymentCancel;

    /**
     * Get the implicit to-many join path to the <code>msa.payment_cancel</code>
     * table
     */
    public PaymentCancelPath paymentCancel() {
        if (_paymentCancel == null)
            _paymentCancel = new PaymentCancelPath(this, null, Keys.FKHLF3RGPITFJ1OT3PYYEEFCUE9.getInverseKey());

        return _paymentCancel;
    }

    @Override
    public JPayments as(String alias) {
        return new JPayments(DSL.name(alias), this);
    }

    @Override
    public JPayments as(Name alias) {
        return new JPayments(alias, this);
    }

    @Override
    public JPayments as(Table<?> alias) {
        return new JPayments(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JPayments rename(String name) {
        return new JPayments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JPayments rename(Name name) {
        return new JPayments(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JPayments rename(Table<?> name) {
        return new JPayments(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPayments where(Condition condition) {
        return new JPayments(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPayments where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPayments where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPayments where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPayments where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPayments where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPayments where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPayments where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPayments whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPayments whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
