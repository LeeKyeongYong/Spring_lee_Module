/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.JSubject;
import org.jooq.generated.tables.pojos.Subject;
import org.jooq.generated.tables.records.SubjectRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SubjectDao extends DAOImpl<SubjectRecord, Subject, Long> {

    /**
     * Create a new SubjectDao without any configuration
     */
    public SubjectDao() {
        super(JSubject.SUBJECT, Subject.class);
    }

    /**
     * Create a new SubjectDao with an attached configuration
     */
    public SubjectDao(Configuration configuration) {
        super(JSubject.SUBJECT, Subject.class, configuration);
    }

    @Override
    public Long getId(Subject object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>hours BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Subject> fetchRangeOfJHours(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JSubject.SUBJECT.HOURS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>hours IN (values)</code>
     */
    public List<Subject> fetchByJHours(Integer... values) {
        return fetch(JSubject.SUBJECT.HOURS, values);
    }

    /**
     * Fetch records that have <code>open_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Subject> fetchRangeOfJOpenDate(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRange(JSubject.SUBJECT.OPEN_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>open_date IN (values)</code>
     */
    public List<Subject> fetchByJOpenDate(LocalDate... values) {
        return fetch(JSubject.SUBJECT.OPEN_DATE, values);
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Subject> fetchRangeOfJId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JSubject.SUBJECT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<Subject> fetchByJId(Long... values) {
        return fetch(JSubject.SUBJECT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Subject fetchOneByJId(Long value) {
        return fetchOne(JSubject.SUBJECT.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<Subject> fetchOptionalByJId(Long value) {
        return fetchOptional(JSubject.SUBJECT.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Subject> fetchRangeOfJName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JSubject.SUBJECT.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<Subject> fetchByJName(String... values) {
        return fetch(JSubject.SUBJECT.NAME, values);
    }
}
