/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.JMessages;
import org.jooq.generated.tables.pojos.Messages;
import org.jooq.generated.tables.records.MessagesRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MessagesDao extends DAOImpl<MessagesRecord, Messages, Long> {

    /**
     * Create a new MessagesDao without any configuration
     */
    public MessagesDao() {
        super(JMessages.MESSAGES, Messages.class);
    }

    /**
     * Create a new MessagesDao with an attached configuration
     */
    public MessagesDao(Configuration configuration) {
        super(JMessages.MESSAGES, Messages.class, configuration);
    }

    @Override
    public Long getId(Messages object) {
        return object.getMessageId();
    }

    /**
     * Fetch records that have <code>message_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Messages> fetchRangeOfJMessageId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JMessages.MESSAGES.MESSAGE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>message_id IN (values)</code>
     */
    public List<Messages> fetchByJMessageId(Long... values) {
        return fetch(JMessages.MESSAGES.MESSAGE_ID, values);
    }

    /**
     * Fetch a unique record that has <code>message_id = value</code>
     */
    public Messages fetchOneByJMessageId(Long value) {
        return fetchOne(JMessages.MESSAGES.MESSAGE_ID, value);
    }

    /**
     * Fetch a unique record that has <code>message_id = value</code>
     */
    public Optional<Messages> fetchOptionalByJMessageId(Long value) {
        return fetchOptional(JMessages.MESSAGES.MESSAGE_ID, value);
    }

    /**
     * Fetch records that have <code>next_message_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Messages> fetchRangeOfJNextMessageId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JMessages.MESSAGES.NEXT_MESSAGE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>next_message_id IN (values)</code>
     */
    public List<Messages> fetchByJNextMessageId(Long... values) {
        return fetch(JMessages.MESSAGES.NEXT_MESSAGE_ID, values);
    }

    /**
     * Fetch records that have <code>message_text BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Messages> fetchRangeOfJMessageText(String lowerInclusive, String upperInclusive) {
        return fetchRange(JMessages.MESSAGES.MESSAGE_TEXT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>message_text IN (values)</code>
     */
    public List<Messages> fetchByJMessageText(String... values) {
        return fetch(JMessages.MESSAGES.MESSAGE_TEXT, values);
    }
}
