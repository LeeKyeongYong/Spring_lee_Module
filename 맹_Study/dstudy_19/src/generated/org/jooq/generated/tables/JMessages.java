/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JMsa;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.JMessages.MessagesPath;
import org.jooq.generated.tables.records.MessagesRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JMessages extends TableImpl<MessagesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>msa.messages</code>
     */
    public static final JMessages MESSAGES = new JMessages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessagesRecord> getRecordType() {
        return MessagesRecord.class;
    }

    /**
     * The column <code>msa.messages.message_id</code>.
     */
    public final TableField<MessagesRecord, Long> MESSAGE_ID = createField(DSL.name("message_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>msa.messages.next_message_id</code>.
     */
    public final TableField<MessagesRecord, Long> NEXT_MESSAGE_ID = createField(DSL.name("next_message_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>msa.messages.message_text</code>.
     */
    public final TableField<MessagesRecord, String> MESSAGE_TEXT = createField(DSL.name("message_text"), SQLDataType.VARCHAR(255), this, "");

    private JMessages(Name alias, Table<MessagesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JMessages(Name alias, Table<MessagesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>msa.messages</code> table reference
     */
    public JMessages(String alias) {
        this(DSL.name(alias), MESSAGES);
    }

    /**
     * Create an aliased <code>msa.messages</code> table reference
     */
    public JMessages(Name alias) {
        this(alias, MESSAGES);
    }

    /**
     * Create a <code>msa.messages</code> table reference
     */
    public JMessages() {
        this(DSL.name("messages"), null);
    }

    public <O extends Record> JMessages(Table<O> path, ForeignKey<O, MessagesRecord> childPath, InverseForeignKey<O, MessagesRecord> parentPath) {
        super(path, childPath, parentPath, MESSAGES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class MessagesPath extends JMessages implements Path<MessagesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> MessagesPath(Table<O> path, ForeignKey<O, MessagesRecord> childPath, InverseForeignKey<O, MessagesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private MessagesPath(Name alias, Table<MessagesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public MessagesPath as(String alias) {
            return new MessagesPath(DSL.name(alias), this);
        }

        @Override
        public MessagesPath as(Name alias) {
            return new MessagesPath(alias, this);
        }

        @Override
        public MessagesPath as(Table<?> alias) {
            return new MessagesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMsa.MSA;
    }

    @Override
    public Identity<MessagesRecord, Long> getIdentity() {
        return (Identity<MessagesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MessagesRecord> getPrimaryKey() {
        return Keys.KEY_MESSAGES_PRIMARY;
    }

    @Override
    public List<ForeignKey<MessagesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKC178XL191UN3K711BS5AETEJ2);
    }

    private transient MessagesPath _messages;

    /**
     * Get the implicit join path to the <code>msa.messages</code> table.
     */
    public MessagesPath messages() {
        if (_messages == null)
            _messages = new MessagesPath(this, Keys.FKC178XL191UN3K711BS5AETEJ2, null);

        return _messages;
    }

    @Override
    public JMessages as(String alias) {
        return new JMessages(DSL.name(alias), this);
    }

    @Override
    public JMessages as(Name alias) {
        return new JMessages(alias, this);
    }

    @Override
    public JMessages as(Table<?> alias) {
        return new JMessages(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JMessages rename(String name) {
        return new JMessages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JMessages rename(Name name) {
        return new JMessages(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JMessages rename(Table<?> name) {
        return new JMessages(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMessages where(Condition condition) {
        return new JMessages(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMessages where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMessages where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMessages where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JMessages where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JMessages where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JMessages where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JMessages where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMessages whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMessages whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
