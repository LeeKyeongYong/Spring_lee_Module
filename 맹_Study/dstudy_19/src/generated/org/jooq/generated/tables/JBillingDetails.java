/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JMsa;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.BillingDetailsRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JBillingDetails extends TableImpl<BillingDetailsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>msa.billing_details</code>
     */
    public static final JBillingDetails BILLING_DETAILS = new JBillingDetails();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BillingDetailsRecord> getRecordType() {
        return BillingDetailsRecord.class;
    }

    /**
     * The column <code>msa.billing_details.id</code>.
     */
    public final TableField<BillingDetailsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>msa.billing_details.owner</code>.
     */
    public final TableField<BillingDetailsRecord, String> OWNER = createField(DSL.name("owner"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>msa.billing_details.billing_type</code>.
     */
    public final TableField<BillingDetailsRecord, String> BILLING_TYPE = createField(DSL.name("billing_type"), SQLDataType.VARCHAR(31).nullable(false), this, "");

    private JBillingDetails(Name alias, Table<BillingDetailsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JBillingDetails(Name alias, Table<BillingDetailsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>msa.billing_details</code> table reference
     */
    public JBillingDetails(String alias) {
        this(DSL.name(alias), BILLING_DETAILS);
    }

    /**
     * Create an aliased <code>msa.billing_details</code> table reference
     */
    public JBillingDetails(Name alias) {
        this(alias, BILLING_DETAILS);
    }

    /**
     * Create a <code>msa.billing_details</code> table reference
     */
    public JBillingDetails() {
        this(DSL.name("billing_details"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMsa.MSA;
    }

    @Override
    public Identity<BillingDetailsRecord, Long> getIdentity() {
        return (Identity<BillingDetailsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BillingDetailsRecord> getPrimaryKey() {
        return Keys.KEY_BILLING_DETAILS_PRIMARY;
    }

    @Override
    public JBillingDetails as(String alias) {
        return new JBillingDetails(DSL.name(alias), this);
    }

    @Override
    public JBillingDetails as(Name alias) {
        return new JBillingDetails(alias, this);
    }

    @Override
    public JBillingDetails as(Table<?> alias) {
        return new JBillingDetails(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JBillingDetails rename(String name) {
        return new JBillingDetails(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JBillingDetails rename(Name name) {
        return new JBillingDetails(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JBillingDetails rename(Table<?> name) {
        return new JBillingDetails(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JBillingDetails where(Condition condition) {
        return new JBillingDetails(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JBillingDetails where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JBillingDetails where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JBillingDetails where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JBillingDetails where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JBillingDetails where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JBillingDetails where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JBillingDetails where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JBillingDetails whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JBillingDetails whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
