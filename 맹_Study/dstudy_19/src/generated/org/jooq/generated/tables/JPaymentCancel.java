/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JMsa;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.JPayments.PaymentsPath;
import org.jooq.generated.tables.records.PaymentCancelRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JPaymentCancel extends TableImpl<PaymentCancelRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>msa.payment_cancel</code>
     */
    public static final JPaymentCancel PAYMENT_CANCEL = new JPaymentCancel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentCancelRecord> getRecordType() {
        return PaymentCancelRecord.class;
    }

    /**
     * The column <code>msa.payment_cancel.cancel_amount</code>.
     */
    public final TableField<PaymentCancelRecord, Integer> CANCEL_AMOUNT = createField(DSL.name("cancel_amount"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>msa.payment_cancel.canceled_at</code>.
     */
    public final TableField<PaymentCancelRecord, LocalDateTime> CANCELED_AT = createField(DSL.name("canceled_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>msa.payment_cancel.create_date</code>.
     */
    public final TableField<PaymentCancelRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>msa.payment_cancel.id</code>.
     */
    public final TableField<PaymentCancelRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>msa.payment_cancel.modify_date</code>.
     */
    public final TableField<PaymentCancelRecord, LocalDateTime> MODIFY_DATE = createField(DSL.name("modify_date"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>msa.payment_cancel.payment_id</code>.
     */
    public final TableField<PaymentCancelRecord, Long> PAYMENT_ID = createField(DSL.name("payment_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>msa.payment_cancel.cancel_reason</code>.
     */
    public final TableField<PaymentCancelRecord, String> CANCEL_REASON = createField(DSL.name("cancel_reason"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>msa.payment_cancel.transaction_key</code>.
     */
    public final TableField<PaymentCancelRecord, String> TRANSACTION_KEY = createField(DSL.name("transaction_key"), SQLDataType.VARCHAR(255), this, "");

    private JPaymentCancel(Name alias, Table<PaymentCancelRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JPaymentCancel(Name alias, Table<PaymentCancelRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>msa.payment_cancel</code> table reference
     */
    public JPaymentCancel(String alias) {
        this(DSL.name(alias), PAYMENT_CANCEL);
    }

    /**
     * Create an aliased <code>msa.payment_cancel</code> table reference
     */
    public JPaymentCancel(Name alias) {
        this(alias, PAYMENT_CANCEL);
    }

    /**
     * Create a <code>msa.payment_cancel</code> table reference
     */
    public JPaymentCancel() {
        this(DSL.name("payment_cancel"), null);
    }

    public <O extends Record> JPaymentCancel(Table<O> path, ForeignKey<O, PaymentCancelRecord> childPath, InverseForeignKey<O, PaymentCancelRecord> parentPath) {
        super(path, childPath, parentPath, PAYMENT_CANCEL);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PaymentCancelPath extends JPaymentCancel implements Path<PaymentCancelRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PaymentCancelPath(Table<O> path, ForeignKey<O, PaymentCancelRecord> childPath, InverseForeignKey<O, PaymentCancelRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PaymentCancelPath(Name alias, Table<PaymentCancelRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PaymentCancelPath as(String alias) {
            return new PaymentCancelPath(DSL.name(alias), this);
        }

        @Override
        public PaymentCancelPath as(Name alias) {
            return new PaymentCancelPath(alias, this);
        }

        @Override
        public PaymentCancelPath as(Table<?> alias) {
            return new PaymentCancelPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMsa.MSA;
    }

    @Override
    public Identity<PaymentCancelRecord, Long> getIdentity() {
        return (Identity<PaymentCancelRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PaymentCancelRecord> getPrimaryKey() {
        return Keys.KEY_PAYMENT_CANCEL_PRIMARY;
    }

    @Override
    public List<ForeignKey<PaymentCancelRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKHLF3RGPITFJ1OT3PYYEEFCUE9);
    }

    private transient PaymentsPath _payments;

    /**
     * Get the implicit join path to the <code>msa.payments</code> table.
     */
    public PaymentsPath payments() {
        if (_payments == null)
            _payments = new PaymentsPath(this, Keys.FKHLF3RGPITFJ1OT3PYYEEFCUE9, null);

        return _payments;
    }

    @Override
    public JPaymentCancel as(String alias) {
        return new JPaymentCancel(DSL.name(alias), this);
    }

    @Override
    public JPaymentCancel as(Name alias) {
        return new JPaymentCancel(alias, this);
    }

    @Override
    public JPaymentCancel as(Table<?> alias) {
        return new JPaymentCancel(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JPaymentCancel rename(String name) {
        return new JPaymentCancel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JPaymentCancel rename(Name name) {
        return new JPaymentCancel(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JPaymentCancel rename(Table<?> name) {
        return new JPaymentCancel(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPaymentCancel where(Condition condition) {
        return new JPaymentCancel(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPaymentCancel where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPaymentCancel where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPaymentCancel where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPaymentCancel where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPaymentCancel where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPaymentCancel where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPaymentCancel where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPaymentCancel whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPaymentCancel whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
