/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableOptions;
import org.jooq.generated.JMsa;
import org.jooq.generated.tables.records.PostLikeDetailRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * View 'msa.post_like_detail' references invalid table(s) or column(s) or
 * function(s) or definer/invoker of view lack rights to use them
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JPostLikeDetail extends TableImpl<PostLikeDetailRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>msa.post_like_detail</code>
     */
    public static final JPostLikeDetail POST_LIKE_DETAIL = new JPostLikeDetail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PostLikeDetailRecord> getRecordType() {
        return PostLikeDetailRecord.class;
    }

    private JPostLikeDetail(Name alias, Table<PostLikeDetailRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JPostLikeDetail(Name alias, Table<PostLikeDetailRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("View 'msa.post_like_detail' references invalid table(s) or column(s) or function(s) or definer/invoker of view lack rights to use them"), TableOptions.view("create view `post_like_detail` as select `p`.`id` AS `post_id`,`p`.`title` AS `post_title`,`p`.`create_date` AS `post_create_date`,`p`.`modify_date` AS `post_modify_date`,`p`.`hit` AS `post_hit`,`p`.`author_id` AS `post_author_id`,`pl`.`member_id` AS `like_member_id`,`pl`.`create_date` AS `like_create_date` from (`msa`.`post` `p` left join `msa`.`post_like` `pl` on((`p`.`id` = `pl`.`post_id`))) order by `p`.`id`,`pl`.`create_date`"), where);
    }

    /**
     * Create an aliased <code>msa.post_like_detail</code> table reference
     */
    public JPostLikeDetail(String alias) {
        this(DSL.name(alias), POST_LIKE_DETAIL);
    }

    /**
     * Create an aliased <code>msa.post_like_detail</code> table reference
     */
    public JPostLikeDetail(Name alias) {
        this(alias, POST_LIKE_DETAIL);
    }

    /**
     * Create a <code>msa.post_like_detail</code> table reference
     */
    public JPostLikeDetail() {
        this(DSL.name("post_like_detail"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMsa.MSA;
    }

    @Override
    public JPostLikeDetail as(String alias) {
        return new JPostLikeDetail(DSL.name(alias), this);
    }

    @Override
    public JPostLikeDetail as(Name alias) {
        return new JPostLikeDetail(alias, this);
    }

    @Override
    public JPostLikeDetail as(Table<?> alias) {
        return new JPostLikeDetail(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JPostLikeDetail rename(String name) {
        return new JPostLikeDetail(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JPostLikeDetail rename(Name name) {
        return new JPostLikeDetail(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JPostLikeDetail rename(Table<?> name) {
        return new JPostLikeDetail(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPostLikeDetail where(Condition condition) {
        return new JPostLikeDetail(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPostLikeDetail where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPostLikeDetail where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPostLikeDetail where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPostLikeDetail where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPostLikeDetail where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPostLikeDetail where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPostLikeDetail where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPostLikeDetail whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPostLikeDetail whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
