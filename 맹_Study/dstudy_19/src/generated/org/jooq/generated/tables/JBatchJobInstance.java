/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JMsa;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.BatchJobInstanceRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JBatchJobInstance extends TableImpl<BatchJobInstanceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>msa.BATCH_JOB_INSTANCE</code>
     */
    public static final JBatchJobInstance BATCH_JOB_INSTANCE = new JBatchJobInstance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BatchJobInstanceRecord> getRecordType() {
        return BatchJobInstanceRecord.class;
    }

    /**
     * The column <code>msa.BATCH_JOB_INSTANCE.JOB_INSTANCE_ID</code>.
     */
    public final TableField<BatchJobInstanceRecord, Long> JOB_INSTANCE_ID = createField(DSL.name("JOB_INSTANCE_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>msa.BATCH_JOB_INSTANCE.VERSION</code>.
     */
    public final TableField<BatchJobInstanceRecord, Long> VERSION = createField(DSL.name("VERSION"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>msa.BATCH_JOB_INSTANCE.JOB_NAME</code>.
     */
    public final TableField<BatchJobInstanceRecord, String> JOB_NAME = createField(DSL.name("JOB_NAME"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>msa.BATCH_JOB_INSTANCE.JOB_KEY</code>.
     */
    public final TableField<BatchJobInstanceRecord, String> JOB_KEY = createField(DSL.name("JOB_KEY"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    private JBatchJobInstance(Name alias, Table<BatchJobInstanceRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JBatchJobInstance(Name alias, Table<BatchJobInstanceRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>msa.BATCH_JOB_INSTANCE</code> table reference
     */
    public JBatchJobInstance(String alias) {
        this(DSL.name(alias), BATCH_JOB_INSTANCE);
    }

    /**
     * Create an aliased <code>msa.BATCH_JOB_INSTANCE</code> table reference
     */
    public JBatchJobInstance(Name alias) {
        this(alias, BATCH_JOB_INSTANCE);
    }

    /**
     * Create a <code>msa.BATCH_JOB_INSTANCE</code> table reference
     */
    public JBatchJobInstance() {
        this(DSL.name("BATCH_JOB_INSTANCE"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMsa.MSA;
    }

    @Override
    public UniqueKey<BatchJobInstanceRecord> getPrimaryKey() {
        return Keys.KEY_BATCH_JOB_INSTANCE_PRIMARY;
    }

    @Override
    public JBatchJobInstance as(String alias) {
        return new JBatchJobInstance(DSL.name(alias), this);
    }

    @Override
    public JBatchJobInstance as(Name alias) {
        return new JBatchJobInstance(alias, this);
    }

    @Override
    public JBatchJobInstance as(Table<?> alias) {
        return new JBatchJobInstance(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JBatchJobInstance rename(String name) {
        return new JBatchJobInstance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JBatchJobInstance rename(Name name) {
        return new JBatchJobInstance(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JBatchJobInstance rename(Table<?> name) {
        return new JBatchJobInstance(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JBatchJobInstance where(Condition condition) {
        return new JBatchJobInstance(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JBatchJobInstance where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JBatchJobInstance where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JBatchJobInstance where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JBatchJobInstance where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JBatchJobInstance where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JBatchJobInstance where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JBatchJobInstance where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JBatchJobInstance whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JBatchJobInstance whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
