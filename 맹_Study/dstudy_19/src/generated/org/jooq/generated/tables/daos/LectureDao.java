/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.util.List;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.generated.tables.JLecture;
import org.jooq.generated.tables.pojos.Lecture;
import org.jooq.generated.tables.records.LectureRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LectureDao extends DAOImpl<LectureRecord, Lecture, Record2<Long, Long>> {

    /**
     * Create a new LectureDao without any configuration
     */
    public LectureDao() {
        super(JLecture.LECTURE, Lecture.class);
    }

    /**
     * Create a new LectureDao with an attached configuration
     */
    public LectureDao(Configuration configuration) {
        super(JLecture.LECTURE, Lecture.class, configuration);
    }

    @Override
    public Record2<Long, Long> getId(Lecture object) {
        return compositeKeyRecord(object.getId(), object.getNo());
    }

    /**
     * Fetch records that have <code>score BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Lecture> fetchRangeOfJScore(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JLecture.LECTURE.SCORE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>score IN (values)</code>
     */
    public List<Lecture> fetchByJScore(Integer... values) {
        return fetch(JLecture.LECTURE.SCORE, values);
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Lecture> fetchRangeOfJId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JLecture.LECTURE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<Lecture> fetchByJId(Long... values) {
        return fetch(JLecture.LECTURE.ID, values);
    }

    /**
     * Fetch records that have <code>no BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Lecture> fetchRangeOfJNo(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JLecture.LECTURE.NO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>no IN (values)</code>
     */
    public List<Lecture> fetchByJNo(Long... values) {
        return fetch(JLecture.LECTURE.NO, values);
    }
}
