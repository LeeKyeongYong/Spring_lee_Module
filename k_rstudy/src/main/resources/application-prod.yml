server:
  shutdown: graceful               # 서버 종료 방식
  port: 8090                       # 서버 포트 설정
  servlet:
    session:
      timeout: 30m                 # 세션 타임아웃 설정

spring:
  web:
    resources:
      add-mappings: false
      static-locations: classpath:/static/
  mvc:
    throw-exception-if-no-handler-found: true
    static-path-pattern: /resource/**
  thymeleaf:
    cache: false
  main:
    banner-mode: "off"            # 배너 비활성화
    allow-circular-references: true # 순환 참조 허용
  datasource:
    url: ENC(6cfhztgVfYcfZkMuSaiOYWX2jzMDvc0s0EtJSgFjeoPbHMZFzq6mgA==) # 데이터소스 URL (암호화)
    username: ENC(cFw3ePouhmGwMfEVk9R5/g==)                              # 사용자명 (암호화)
    password: ENC(pJygnOjrAhRQQ0m6TSlokQ==)                              # 비밀번호 (암호화)
    driver-class-name: com.mysql.cj.jdbc.Driver                          # JDBC 드라이버
    hikari:
      poolName: Hikari             # HikariCP 이름
      max-lifetime: 1800000        # 최대 생명 주기
      auto-commit: false           # 자동 커밋 비활성화
      maximum-pool-size: 5         # 최대 풀 크기
      data-source-properties:
        cachePrepStmts: true       # Prepared Statement 캐시 활성화
        prepStmtCacheSize: 250      # Prepared Statement 캐시 크기
        prepStmtCacheSqlLimit: 2048 # Prepared Statement SQL 제한
    validation-query: select 1     # 유효성 검사 쿼리
    test-on-borrow: true           # 대여 시 유효성 검사 활성화
    schema: classpath:db/migration/k_db.sql  # 스키마 파일 경로
    initialization-mode: always     # 초기화 모드 설정
    read-only: false
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update  # 기존 테이블 유지 안 하고 매번 새로 생성 후 삭제
    properties:
      hibernate:
        jdbc:
          batch_size: 50
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true
    open-in-view: true

  security:
    oauth2:
      client:
        registration:
          your-client:
            client-id: your-client-id
            client-secret: your-client-secret
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: read,write
        provider:
          your-client:
            authorization-uri: https://example.com/oauth/authorize
            token-uri: https://example.com/oauth/token
            user-info-uri: https://example.com/oauth/userinfo

custom:
  dev:
    cookieDomain: localhost        # 개발 환경 쿠키 도메인
    backUrl: "http://${custom.dev.cookieDomain}:${server.port}" # 개발 환경 백엔드 URL
  site:
    baseUrl: "https://www.sleekydz86.gg"  # 사이트 기본 URL
    cookieDomain: "${custom.dev.cookieDomain}"  # 쿠키 도메인
    backUrl: "${custom.dev.backUrl}"        # 백엔드 URL
    name: sleekydz86                          # 사이트 이름
  genFile:
    dirPath: /gen                          # 생성된 파일 경로
  temp:
    dirPath: D:/workLEE                    # 임시 파일 경로
  jwt:
    secretKey: ON_SECRET
    access:
      token:
        expiration: '#{60*60}'           # JWT 엑세스 토큰 만료 시간 (초)
        sec: 3600                        # 엑세스 토큰 만료 시간 (초)
  accessToken:
    expirationSec: 3600                    # 엑세스 토큰 만료 시간 (초)

jasypt:
  encryptor:
    password: your-secret-password          # Jasypt 암호화 비밀번호

security:
  jwt:
    secret: 'u]#SZTxIbtX\UCb7],V(*k^h70v-(<*|^?m+G|K=FSMy{a67yF$pe#c_Xw-Pui4G'  # JWT 보안 비밀

topic:
  name: your-topic-name                    # 토픽 이름

frontend:
  url: 'http://localhost:8090'  # 프론트엔드 URL을 완전한 형식으로 수정

jwt:
  secret: abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ
  expiration: 3600000           # JWT 엑세스 토큰 만료 시간 (초)