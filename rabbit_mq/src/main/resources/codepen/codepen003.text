html>>
<nav>
  <ul>
    <li>
      <a href="javascript:showPage('login');">로그인</a>
      <a href="javascript:showPage('chatRoomList');">채팅방 목록</a>
    </li>
  </ul>
</nav>

<section id="loginPage" class="page">
  <h1>로그인</h1>

  <div>
    <h2>로그인 폼</h2>

    <form action="" onsubmit="submitLoginForm(this); return false;">
      <input type="text" name="username" placeholder="USERNAME">
      <input type="password" name="password" placeholder="PASSWORD">
      <input type="submit" value="로그인">
    </form>

    <h2>로그인 결과</h2>
    <div id="login-rs"></div>
  </div>
</section>

<section id="chatRoomListPage" class="page">
  <h1>채팅방 리스트</h1>

</section>


css>>
.page {
  display:none;
}

.page.active {
  display:block;
}



javascript>>
console.clear();

// 유틸 시작
function ucfirst(str) {
  // 문자열이 비어있지 않은 경우에만 처리
  if (str && str.length > 0) {
    // 첫 글자를 대문자로 변환하고 나머지 문자열과 결합
    return str.charAt(0).toUpperCase() + str.slice(1);
  } else {
    // 비어있는 문자열의 경우, 그대로 반환
    return str;
  }
}
// 유틸 끝

// 전체 코드 시작
function showPage(pageName) {
  document
    .querySelectorAll(".page")
    .forEach((element) => element.classList.remove("active"));
  document.querySelector("#" + pageName + "Page").classList.add("active");

  const onPageStartedFuncName = "on" + ucfirst(pageName) + "PageStarted";

  if (window[onPageStartedFuncName]) {
    window[onPageStartedFuncName]();
  }
}
// 전체 코드 끝

// 로그인 페이지 관련 시작
function onLoginPageStarted() {}

async function submitLoginForm(form) {
  form.username.value = form.username.value.trim();
  if (form.username.value.length == 0) {
    form.username.focus();
    alert("username을 입력해주세요.");
    return;
  }

  const username = form.username.value;

  form.password.value = form.password.value.trim();
  if (form.password.value.length == 0) {
    form.password.focus();
    alert("password를 입력해주세요.");
    return;
  }

  const password = form.password.value.trim();

  try {
    const response = await fetch("http://localhost:8090/api/v1/members/login", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        username,
        password
      }),
      credentials: "include"
    });

    const data = await response.json();

    if (!response.ok) throw data;

    document.querySelector(
      "#login-rs"
    ).innerHTML = `<button>${data.data.item.name} 로그아웃</button>`;
  } catch (error) {
    console.error("login form submission failed:", error);
  }
}
// 로그인 페이지 관련 끝

// 채팅방 목록 페이지 관련 시작
async function onChatRoomListPageStarted() {
  try {
    const response = await fetch("http://localhost:8090/api/v1/chatRooms", {
      method: "GET",
      headers: {
        "Content-Type": "application/json"
      },
      credentials: "include"
    });

    const data = await response.json();

    if (!response.ok) throw data;

    console.log(
      "GET http://localhost:8090/api/v1/chatRooms, data.data.itemPage",
      data.data.itemPage
    );
  } catch (error) {
    console.error("GET chatRooms failed:", error);
  }
}
// 채팅방 목록 페이지 관련 끝

showPage("login");
