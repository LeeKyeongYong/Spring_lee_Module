css>>
.page{
  display:none;
}

.page.active{
  display:block;
}

#chatRoomListPaginaction{
  display:flex;
  gap:10px;
}

.page-link.active{
  color:red;
}

html>>
<nav>
  <ul>
    <li>
      <a href="#/member/login">로그인</a>
      <a href="#/chat/roomList">로그아웃</a>
    </li>
  </ul>
</nav>

<section id="memberLoginPage" class="page">
  <h1>로그인</h1>
  <div>
    <h2>로그인폼</h1>
    <form action="" onsubmit="submitLoginForm(this); return false;">
      <input type="text" name="username" placeholder="아이디입력하세요">
      <inpu type="password" name="password" placeholder="비밀번호를 입력하세요">
      <input type="submit" value="로그인">
    </from>

      <h2>로그인 결과</h2>
      <div id="login-rs"></div>
  </div>
</sectinon>

<section id="chatRoomListPage" class="page">
  <h1>채팅방 리스트</h1>

  <ul id="chatRoomList"></ul>
  <div id="chatRoomListPaginaciton"></div>

</section>

  <section id="chatRoomPage" class="page">
    <h1>채팅방 : <span id="chatRoomPage__name"></span></h1>
  </section>


  javascript>>
  console.clear();

  class Rq {
    constructor(hash) {
      this.url = hash.substring(1);

      const [path, queryString] = this.url.split("?", 2);

      this.path = path;
      this.queryString = queryString !== undefined ? queryString : "";
      this.queryParams = {};

      const queryStringBits = this.queryString.split("&");

      for (const queryStringBit of queryStringBits) {
        const [paramName, paramValue] = queryStringBit.split("=", 2);
        this.queryParams[paramName] = paramValue;
      }
    }

    getParam(name, defaultValue) {
      return this.queryParams[name] ?? defaultValue;
    }

    getParamAsNumber(name, defaultValue) {
      return parseInt(this.queryParams[name]) ?? defaultValue;
    }
  }

  let rq = null;

  // 유틸 시작
  function ucfirst(str) {
    // 문자열이 비어있지 않은 경우에만 처리
    if (str && str.length > 0) {
      // 첫 글자를 대문자로 변환하고 나머지 문자열과 결합
      return str.charAt(0).toUpperCase() + str.slice(1);
    } else {
      // 비어있는 문자열의 경우, 그대로 반환
      return str;
    }
  }
  // 유틸 끝

  // 전체 코드 시작
  // 해시 변경 이벤트 리스너를 설정하는 함수
  function setupHashRouting() {
    window.addEventListener("hashchange", () => {
      // 현재 URL에서 해시값을 가져옴
      const hash = window.location.hash;

      rq = new Rq(hash);

      // 해시값에 따라 다른 함수를 실행
      switch (rq.path) {
        case "/member/login":
          showPage("memberLogin");
          break;
        case "/chat/roomList":
          showPage("chatRoomList");
          break;
        case "/chat/room":
          showPage("chatRoom");
          break;
        default:
          alert(rq.path + " (은)는 존재하지 않는 페이지 입니다."); // TODO : 주석해제
          break;
      }
    });
  }

  // 페이지 로드 시 해시 라우팅 설정
  document.addEventListener("DOMContentLoaded", setupHashRouting);

  function movePage(pageUrl) {
    location.hash = pageUrl;
  }

  function showPage(pageName) {
    document
      .querySelectorAll(".page")
      .forEach((element) => element.classList.remove("active"));
    document.querySelector("#" + pageName + "Page").classList.add("active");

    const onPageStartedFuncName = "on" + ucfirst(pageName) + "PageStarted";

    if (window[onPageStartedFuncName]) {
      window[onPageStartedFuncName]();
    }
  }
  // 전체 코드 끝

  // 로그인 페이지 관련 시작
  function onMemberLoginPageStarted() {}

  async function submitLoginForm(form) {
    form.username.value = form.username.value.trim();
    if (form.username.value.length == 0) {
      form.username.focus();
      alert("username을 입력해주세요.");
      return;
    }

    const username = form.username.value;

    form.password.value = form.password.value.trim();
    if (form.password.value.length == 0) {
      form.password.focus();
      alert("password를 입력해주세요.");
      return;
    }

    const password = form.password.value.trim();

    try {
      const response = await fetch("http://localhost:8090/api/v1/members/login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          username,
          password
        }),
        credentials: "include"
      });

      const data = await response.json();

      if (!response.ok) throw data;

      document.querySelector(
        "#login-rs"
      ).innerHTML = `<button>${data.data.item.name} 로그아웃</button>`;
    } catch (error) {
      console.error("login form submission failed:", error);
    }
  }
  // 로그인 페이지 관련 끝

  // 채팅방 목록 페이지 관련 시작
  async function onChatRoomListPageStarted() {
    let data = null;

    const page = rq.getParam("page", 1);

    try {
      const response = await fetch(
        `http://localhost:8090/api/v1/chatRooms?page=${page}`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json"
          },
          credentials: "include"
        }
      );

      const responsData = await response.json();

      if (!response.ok) throw responsData;

      data = responsData;
    } catch (error) {
      console.error("GET chatRooms failed:", error);
    }

    drawChatRoomList(data.data.itemPage);
  }

  function drawChatRoomList(itemPage) {
    const chatRoomListEl = document.querySelector("#chatRoomList");
    const chatRoomListPaginationEl = document.querySelector(
      "#chatRoomListPagination"
    );

    // 채팅방 목록 초기화
    chatRoomListEl.innerHTML = "";
    chatRoomListPaginationEl.innerHTML = "";

    // 채팅방 목록이 비어있는 경우 처리
    if (itemPage.content.length === 0) {
      chatRoomListEl.innerHTML = "<li>채팅방이 없습니다.</li>";
      return;
    }

    // 채팅방 목록을 순회하면서 각 채팅방을 리스트 아이템으로 추가
    itemPage.content.forEach((chatRoom) => {
      const li = document.createElement("li");
      const a = document.createElement("a");

      li.appendChild(a);
      a.setAttribute("href", "#/chat/room?id=" + chatRoom.id);
      a.textContent = chatRoom.name;

      chatRoomListEl.appendChild(li);
    });

    // 페이지네이션 생성
    if (itemPage.totalPagesCount >= 1) {
      for (let i = 1; i <= itemPage.totalPagesCount; i++) {
        const pageLink = document.createElement("a");
        pageLink.href = "#";
        pageLink.textContent = i;
        pageLink.classList.add("page-link");

        if (i === itemPage.number) pageLink.classList.add("active"); // 현재 페이지 표시

        pageLink.setAttribute("href", "#/chat/roomList?page=" + i);

        chatRoomListPaginationEl.appendChild(pageLink);
      }
    }
  }
  // 채팅방 목록 페이지 관련 끝

  // 채팅방 페이지 관련 시작
  async function onChatRoomPageStarted() {
    let data = null;

    const id = rq.getParamAsNumber("id", 0);

    loadAndDrawChatRoom(id);
  }

  async function loadAndDrawChatRoom(id) {
    try {
      const response = await fetch(
        `http://localhost:8090/api/v1/chatRooms/${id}`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json"
          },
          credentials: "include"
        }
      );

      const responsData = await response.json();

      if (!response.ok) throw responsData;

      data = responsData;
    } catch (error) {
      console.error("GET chatRoom failed:", error);
    }

    drawChatRoom(data.data.item);
  }

  function drawChatRoom(item) {
    const chatRoomPage__nameEl = document.querySelector("#chatRoomPage__name");

    chatRoomPage__nameEl.innerHTML = item.name;
  }
  // 채팅방 페이지 관련 끝

  // 페이지 로드 시 로그인 페이지로 이동하도록 설정
  document.addEventListener("DOMContentLoaded", () => movePage("/member/login"));
